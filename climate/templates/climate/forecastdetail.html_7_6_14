
{% extends 'climate/base.html' %}

{% block body_block %}

<font size="3" color="blue"><strong> Increased aerosols in sulfate aerosols in the atmosphere could offset some of the warming resulting from
    increased greeenhouse gas concentration so there is a lot of uncertainty in temperature forecast"</strong> </font
>
<style> /* set the CSS */
body { font: 14px Arial;}
path {
stroke: steelblue;
stroke-width: 2;
fill: none;
}
.axis path,
.axis line {
fill: none;
stroke: grey;
opcaity: 0.7;
stroke-width: 1;
shape-rendering: crispEdges;
}
</style

<head>
    <meta charset="utf-8">
    <title>Forecast Chart</title>
    <link rel="stylesheet" type="text/css" href="../../static/forecast/css/styles.css"/>
    <script type="text/javascript" src="../../static/forecast/lib/d3.js"></script>
</head>

<h2>{{location.city_name}}</h2>

		<ul>
	        {% for temp in location.temperature_set.all %}
		  <li>{{ temp.temp_max_imperial }}</li>
		</ul>
                {% endfor %}


<!-- temperature gradient is the ratio between change in temperature between 2 close cities and distance in miles between cities
     wind velocity multiplied by temperature gradient and by 24 hours = advection for next 24 hours
     forecast for next day = today's temperature multiplied by its advection  --> 


<p><br><strong>&nbsp&nbsp&nbsp&nbspcurrent windspeed=</strong> {{windspeed}}  </br> </p>
<p><br><strong>&nbsp&nbsp&nbsp&nbspcurrent temperature=</strong> {{json_ctemp}}  </br></p>
<p><br><strong>&nbsp&nbsp&nbsp&nbsptemperature gradient=</strong> {{temperaturegradient}}0.006  </br></p>
<p><br><strong>&nbsp&nbsp&nbsp&nbspadvection=</strong> {{advection}}  </br> </p>
<p><br><br><br></p>
<p><font size="3" color="blue"> <strong>&nbsp&nbsp&nbsp&nbspTomorrow forecast:</strong></font> </p>

<p><br><strong>&nbsp&nbsp&nbsp&nbspsurface temperature=</strong> {{json_temp}}  </br></p>
<p><br><br><br></p>






<script type="text/javascript">
    var width = 500,
        height = 500,
        margin = 60,
        x = d3.scale.linear() // <-A
            .domain([0, 10])
            .range([margin, width - margin]),
        y = d3.scale.linear() // <-B
            .domain([0, 10])
            .range([height - margin, margin]);
 
    var parseDate = d3.time.format("%d-%b-%y").parse;

   //
  
    var fTemp = {{json_temp}}/10;
    var cTemp = {{json_ctemp}}/10;
    
    var data = [ // <-C
        [
            {x: 1, y: cTemp},{x: 2, y:fTemp},{x: 3, y: 8.3},
            {x: 4, y: 8.2},{x: 5, y:8.3},{x: 6, y: 8.4},
            {x: 7, y: 8.2},{x: 8, y: 8.3},{x: 9, y: 8.2}
        ],

        d3.range(10).map(function(i){
            return {x: 0, y: 0};
        })
    ];

    var line = d3.svg.line() // <-D
            .x(function(d){return x(d.x);})
            .y(function(d){return y(d.y);});

    //var line = d3.svg.line() // <-D
    //        .interpolate("basis")
    //        .x(function(d){return x(d.date);})
    //        .y(function(d){return y(d.close);}); 

    var svg = d3.select("body").append("svg");

    svg.attr("height", height)
        .attr("width", width);

     svg.selectAll("path")
            .data(data)
        .enter()
            .append("path") // <-E
            .attr("class", "line")
            .attr("d", function(d){return line(d);}); // <-F

    renderAxes(svg);

    function renderAxes(svg){ // <-G
        var xAxis = d3.svg.axis()
                .scale(d3.scale.linear()
                    .range([0, quadrantWidth()]))
                .orient("bottom");

        var yAxis = d3.svg.axis()
                .scale(d3.scale.linear()
                    .range([quadrantHeight(), 0]))
                .orient("left");

        svg.append("g")
            .attr("class", "axis")
            .attr("transform", function(){
                return "translate(" + xStart()
                    + "," + yStart() + ")";
            })
            .call(xAxis);

         svg.append("text")
            .attr("x", 240)
            .attr("y", 480) 
            .style("tetx-anchor","middle")
            .text("Daily"); 

         svg.append("text")
            .attr("x", 240)
            .attr("y", 497)
            .style("text-anchor","middle")
            .text("Temperature vs Time");

        svg.append("g")
            .attr("class", "axis")
            .attr("transform", function(){
                return "translate(" + xStart()
                    + "," + yEnd() + ")";
            })
            .call(yAxis);

         svg.append("text")
            .attr("transform", "rotate(-90)")
            .attr("y",0 - margin.left)
            .attr("x",0 - (height/2))
            .attr("dy", "1em")  
            .style("text-anchor","middle")
            .text("Temperature");

  
    }

    function xStart(){
       return margin;
    }

    function yStart(){
        return height - margin;
    }

    function xEnd(){
        return width - margin;
    }

    function yEnd(){
        return margin;
    }

    function quadrantWidth(){
        return width - 2 * margin;
    }

    function quadrantHeight(){
        return height - 2 * margin;
    }


</script>

{% endblock %}
